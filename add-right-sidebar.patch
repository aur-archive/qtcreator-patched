diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/coreplugin.pro ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/coreplugin.pro
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/coreplugin.pro	2013-01-30 21:20:07.000000000 +0400
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/coreplugin.pro	2013-02-06 16:48:38.361783246 +0400
@@ -103,7 +103,9 @@
     textdocument.cpp \
     documentmanager.cpp \
     removefiledialog.cpp \
-    iversioncontrol.cpp
+    iversioncontrol.cpp \
+    informationwidget.cpp \
+    informationsubwidget.cpp
 
 HEADERS += mainwindow.h \
     editmode.h \
@@ -201,7 +203,9 @@
     idocumentfactory.h \
     textdocument.h \
     documentmanager.h \
-    removefiledialog.h
+    removefiledialog.h \
+    informationwidget.h \
+    informationsubwidget.h
 
 FORMS += dialogs/newdialog.ui \
     actionmanager/commandmappings.ui \
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/editmode.cpp ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/editmode.cpp
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/editmode.cpp	2013-01-30 21:20:07.000000000 +0400
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/editmode.cpp	2013-02-06 16:48:38.361783246 +0400
@@ -35,6 +35,7 @@
 #include "findplaceholder.h"
 #include "outputpane.h"
 #include "navigationwidget.h"
+#include "informationwidget.h"
 #include "rightpane.h"
 #include "ieditor.h"
 #include "idocument.h"
@@ -69,6 +70,7 @@
     MiniSplitter *rightPaneSplitter = new MiniSplitter;
     rightPaneSplitter->insertWidget(0, rightSplitWidget);
     rightPaneSplitter->insertWidget(1, new RightPanePlaceHolder(this));
+    rightPaneSplitter->insertWidget(2, new InformationWidgetPlaceHolder(this));
     rightPaneSplitter->setStretchFactor(0, 1);
     rightPaneSplitter->setStretchFactor(1, 0);
 
@@ -83,6 +85,7 @@
 
     m_splitter->insertWidget(0, new NavigationWidgetPlaceHolder(this));
     m_splitter->insertWidget(1, splitter);
+//    m_splitter->insertWidget(2, new InformationWidgetPlaceHolder(this));
     m_splitter->setStretchFactor(0, 0);
     m_splitter->setStretchFactor(1, 1);
 
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/inavigationwidgetfactory.h ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/inavigationwidgetfactory.h
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/inavigationwidgetfactory.h	2013-01-30 21:20:07.000000000 +0400
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/inavigationwidgetfactory.h	2013-02-06 16:48:38.365116710 +0400
@@ -75,4 +75,6 @@
 
 } // namespace Core
 
+Q_DECLARE_METATYPE(Core::INavigationWidgetFactory *)
+
 #endif // INAVIGATIONWIDGET_H
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/informationsubwidget.cpp ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/informationsubwidget.cpp
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/informationsubwidget.cpp	1970-01-01 03:00:00.000000000 +0300
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/informationsubwidget.cpp	2013-02-06 16:48:38.365116710 +0400
@@ -0,0 +1,222 @@
+/****************************************************************************
+**
+** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of Qt Creator.
+**
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+****************************************************************************/
+
+#include "informationsubwidget.h"
+#include "informationwidget.h"
+
+#include "icore.h"
+#include "icontext.h"
+#include "coreconstants.h"
+#include "inavigationwidgetfactory.h"
+#include "modemanager.h"
+#include "actionmanager/actionmanager.h"
+#include "actionmanager/command.h"
+#include "id.h"
+
+#include <extensionsystem/pluginmanager.h>
+
+#include <utils/styledbar.h>
+
+#include <QDebug>
+#include <QSettings>
+
+#include <QAction>
+#include <QHBoxLayout>
+#include <QResizeEvent>
+#include <QToolButton>
+#include <QShortcut>
+#include <QStandardItemModel>
+
+//Q_DECLARE_METATYPE(Core::INavigationWidgetFactory *)
+
+namespace Core {
+namespace Internal {
+
+////
+// InformationSubWidget
+////
+
+InformationSubWidget::InformationSubWidget(InformationWidget *parentWidget, int position, int factoryIndex)
+    : m_parentWidget(parentWidget),
+      m_position(position)
+{
+    m_navigationComboBox = new InfComboBox(this);
+    m_navigationComboBox->setSizePolicy(QSizePolicy::Ignored, QSizePolicy::Ignored);
+    m_navigationComboBox->setFocusPolicy(Qt::TabFocus);
+    m_navigationComboBox->setMinimumContentsLength(0);
+    m_navigationComboBox->setModel(parentWidget->factoryModel());
+    m_navigationWidget = 0;
+    m_navigationWidgetFactory = 0;
+
+    m_toolBar = new Utils::StyledBar(this);
+    QHBoxLayout *toolBarLayout = new QHBoxLayout;
+    toolBarLayout->setMargin(0);
+    toolBarLayout->setSpacing(0);
+    m_toolBar->setLayout(toolBarLayout);
+    toolBarLayout->addWidget(m_navigationComboBox);
+
+    QToolButton *splitAction = new QToolButton();
+    splitAction->setIcon(QIcon(QLatin1String(Constants::ICON_SPLIT_HORIZONTAL)));
+    splitAction->setToolTip(tr("Split"));
+    QToolButton *close = new QToolButton();
+    close->setIcon(QIcon(QLatin1String(Constants::ICON_CLOSE_DOCUMENT)));
+    close->setToolTip(tr("Close"));
+
+    toolBarLayout->addWidget(splitAction);
+    toolBarLayout->addWidget(close);
+
+    QVBoxLayout *lay = new QVBoxLayout();
+    lay->setMargin(0);
+    lay->setSpacing(0);
+    setLayout(lay);
+    lay->addWidget(m_toolBar);
+
+    connect(splitAction, SIGNAL(clicked()), this, SIGNAL(splitMe()));
+    connect(close, SIGNAL(clicked()), this, SIGNAL(closeMe()));
+
+    setFactoryIndex(factoryIndex);
+
+    connect(m_navigationComboBox, SIGNAL(currentIndexChanged(int)),
+            this, SLOT(comboBoxIndexChanged(int)));
+
+    comboBoxIndexChanged(factoryIndex);
+}
+
+InformationSubWidget::~InformationSubWidget()
+{
+}
+
+void InformationSubWidget::comboBoxIndexChanged(int factoryIndex)
+{
+    saveSettings();
+
+    // Remove toolbutton
+    foreach (QWidget *w, m_additionalToolBarWidgets)
+        delete w;
+    m_additionalToolBarWidgets.clear();
+
+    // Remove old Widget
+    delete m_navigationWidget;
+    m_navigationWidget = 0;
+    m_navigationWidgetFactory = 0;
+    if (factoryIndex == -1)
+        return;
+
+    // Get new stuff
+    m_navigationWidgetFactory = m_navigationComboBox->itemData(factoryIndex,
+                           InformationWidget::FactoryObjectRole).value<INavigationWidgetFactory *>();
+    NavigationView n = m_navigationWidgetFactory->createWidget();
+    m_navigationWidget = n.widget;
+    layout()->addWidget(m_navigationWidget);
+
+    // Add Toolbutton
+    m_additionalToolBarWidgets = n.dockToolBarWidgets;
+    QHBoxLayout *layout = qobject_cast<QHBoxLayout *>(m_toolBar->layout());
+    foreach (QToolButton *w, m_additionalToolBarWidgets) {
+        layout->insertWidget(layout->count()-2, w);
+    }
+
+    restoreSettings();
+}
+
+void InformationSubWidget::setFocusWidget()
+{
+    if (m_navigationWidget)
+        m_navigationWidget->setFocus();
+}
+
+INavigationWidgetFactory *InformationSubWidget::factory()
+{
+    return m_navigationWidgetFactory;
+}
+
+
+void InformationSubWidget::saveSettings()
+{
+    if (!m_navigationWidget || !factory())
+        return;
+    factory()->saveSettings(position(), m_navigationWidget);
+}
+
+void InformationSubWidget::restoreSettings()
+{
+    if (!m_navigationWidget || !factory())
+        return;
+    factory()->restoreSettings(position(), m_navigationWidget);
+}
+
+Core::Command *InformationSubWidget::command(const QString &title) const
+{
+    const QHash<Id, Command *> commandMap = m_parentWidget->commandMap();
+    QHash<Id, Command *>::const_iterator r = commandMap.find(Id(title));
+    if (r != commandMap.end())
+        return r.value();
+    return 0;
+}
+
+int InformationSubWidget::factoryIndex() const
+{
+    return m_navigationComboBox->currentIndex();
+}
+
+void InformationSubWidget::setFactoryIndex(int i)
+{
+    m_navigationComboBox->setCurrentIndex(i);
+}
+
+int InformationSubWidget::position() const
+{
+    return m_position;
+}
+
+void InformationSubWidget::setPosition(int position)
+{
+    m_position = position;
+}
+
+InfCommandComboBox::InfCommandComboBox(QWidget *parent) : QComboBox(parent)
+{
+}
+
+bool InfCommandComboBox::event(QEvent *e)
+{
+    if (e->type() == QEvent::ToolTip) {
+        const QString text = currentText();
+        if (const Core::Command *cmd = command(text)) {
+            const QString tooltip = tr("Activate %1 Pane").arg(text);
+            setToolTip(cmd->stringWithAppendedShortcut(tooltip));
+        } else {
+            setToolTip(text);
+        }
+    }
+    return QComboBox::event(e);
+}
+
+} // namespace Internal
+} // namespace Core
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/informationsubwidget.h ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/informationsubwidget.h
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/informationsubwidget.h	1970-01-01 03:00:00.000000000 +0300
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/informationsubwidget.h	2013-02-06 16:48:38.365116710 +0400
@@ -0,0 +1,126 @@
+/****************************************************************************
+**
+** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of Qt Creator.
+**
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+****************************************************************************/
+
+#ifndef INFORMATIONSUBWIDGET_H
+#define INFORMATIONSUBWIDGET_H
+
+#include <QComboBox>
+
+#include <QList>
+
+QT_BEGIN_NAMESPACE
+class QToolButton;
+QT_END_NAMESPACE
+
+namespace Utils {
+class StyledBar;
+}
+
+namespace Core {
+class INavigationWidgetFactory;
+class Command;
+class InformationWidget;
+
+namespace Internal {
+
+class InformationSubWidget : public QWidget
+{
+    Q_OBJECT
+public:
+    InformationSubWidget(InformationWidget *parentWidget, int position, int index);
+    virtual ~InformationSubWidget();
+
+    INavigationWidgetFactory *factory();
+
+    int factoryIndex() const;
+    void setFactoryIndex(int i);
+
+    void setFocusWidget();
+
+    int position() const;
+    void setPosition(int i);
+
+    void saveSettings();
+    void restoreSettings();
+
+    Core::Command *command(const QString &title) const;
+
+signals:
+    void splitMe();
+    void closeMe();
+
+private slots:
+    void comboBoxIndexChanged(int);
+
+private:
+    InformationWidget *m_parentWidget;
+    QComboBox *m_navigationComboBox;
+    QWidget *m_navigationWidget;
+    INavigationWidgetFactory *m_navigationWidgetFactory;
+    Utils::StyledBar *m_toolBar;
+    QList<QToolButton *> m_additionalToolBarWidgets;
+    int m_position;
+};
+
+// A combo associated with a command. Shows the command text
+// and shortcut in the tooltip.
+class InfCommandComboBox : public QComboBox
+{
+    Q_OBJECT
+
+public:
+    explicit InfCommandComboBox(QWidget *parent = 0);
+
+protected:
+    bool event(QEvent *event);
+
+private:
+    virtual const Core::Command *command(const QString &text) const = 0;
+};
+
+
+class InfComboBox : public InfCommandComboBox
+{
+    Q_OBJECT
+
+public:
+    explicit InfComboBox(InformationSubWidget *navSubWidget) :
+        m_navSubWidget(navSubWidget) {}
+
+private:
+    virtual const Core::Command *command(const QString &text) const
+        { return m_navSubWidget->command(text); }
+
+    InformationSubWidget *m_navSubWidget;
+};
+
+} // namespace Internal
+} // namespace Core
+
+#endif // INFORMATIONSUBWIDGET_H
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/informationwidget.cpp ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/informationwidget.cpp
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/informationwidget.cpp	1970-01-01 03:00:00.000000000 +0300
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/informationwidget.cpp	2013-02-06 16:48:38.365116710 +0400
@@ -0,0 +1,409 @@
+#include "informationwidget.h"
+#include "informationsubwidget.h"
+#include "icore.h"
+#include "icontext.h"
+#include "coreconstants.h"
+#include "inavigationwidgetfactory.h"
+#include "modemanager.h"
+#include "actionmanager/actionmanager.h"
+#include "actionmanager/command.h"
+#include "id.h"
+
+#include <extensionsystem/pluginmanager.h>
+
+#include <utils/styledbar.h>
+
+#include <QDebug>
+#include <QSettings>
+
+#include <QAction>
+#include <QHBoxLayout>
+#include <QResizeEvent>
+#include <QToolButton>
+#include <QShortcut>
+#include <QStandardItemModel>
+
+namespace Core {
+
+InformationWidgetPlaceHolder *InformationWidgetPlaceHolder::m_current = 0;
+
+InformationWidgetPlaceHolder* InformationWidgetPlaceHolder::current()
+{
+    return m_current;
+}
+
+InformationWidgetPlaceHolder::InformationWidgetPlaceHolder(Core::IMode *mode, QWidget *parent)
+    :QWidget(parent), m_mode(mode)
+{
+    setLayout(new QVBoxLayout);
+    layout()->setMargin(0);
+    connect(Core::ModeManager::instance(), SIGNAL(currentModeAboutToChange(Core::IMode*)),
+            this, SLOT(currentModeAboutToChange(Core::IMode*)));
+}
+
+InformationWidgetPlaceHolder::~InformationWidgetPlaceHolder()
+{
+    if (m_current == this) {
+        if (InformationWidget *nw = InformationWidget::instance()) {
+            nw->setParent(0);
+            nw->hide();
+        }
+    }
+}
+
+void InformationWidgetPlaceHolder::applyStoredSize(int width)
+{
+    if (width) {
+        QSplitter *splitter = qobject_cast<QSplitter *>(parentWidget());
+        if (splitter) {
+            // A splitter we need to resize the splitter sizes
+            QList<int> sizes = splitter->sizes();
+            int index = splitter->indexOf(this);
+            int diff = width - sizes.at(index);
+            int adjust = sizes.count() > 1 ? (diff / (sizes.count() - 1)) : 0;
+            for (int i = 0; i < sizes.count(); ++i) {
+                if (i != index)
+                    sizes[i] += adjust;
+            }
+            sizes[index]= width;
+            splitter->setSizes(sizes);
+        } else {
+            QSize s = size();
+            s.setWidth(width);
+            resize(s);
+        }
+    }
+}
+
+// This function does work even though the order in which
+// the placeHolder get the signal is undefined.
+// It does ensure that after all PlaceHolders got the signal
+// m_current points to the current PlaceHolder, or zero if there
+// is no PlaceHolder in this mode
+// And that the parent of the NavigationWidget gets the correct parent
+void InformationWidgetPlaceHolder::currentModeAboutToChange(Core::IMode *mode)
+{
+    InformationWidget *informationWidget = InformationWidget::instance();
+
+    if (m_current == this) {
+        m_current = 0;
+        informationWidget->setParent(0);
+        informationWidget->hide();
+        informationWidget->placeHolderChanged(m_current);
+    }
+    if (m_mode == mode) {
+        m_current = this;
+
+        int width = informationWidget->storedWidth();
+
+        layout()->addWidget(informationWidget);
+        informationWidget->show();
+
+        applyStoredSize(width);
+        setVisible(informationWidget->isShown());
+        informationWidget->placeHolderChanged(m_current);
+    }
+}
+
+
+
+
+struct InformationWidgetPrivate
+{
+    explicit InformationWidgetPrivate(QAction *toggleSideBarAction);
+
+    QList<Internal::InformationSubWidget *> m_subWidgets;
+    QHash<QShortcut *, Core::Id> m_shortcutMap;
+    QHash<Core::Id, Core::Command *> m_commandMap;
+    QStandardItemModel *m_factoryModel;
+
+    bool m_shown;
+    bool m_suppressed;
+    int m_width;
+    static InformationWidget* m_instance;
+    QAction *m_toggleSideBarAction;
+};
+
+InformationWidgetPrivate::InformationWidgetPrivate(QAction *toggleSideBarAction) :
+    m_factoryModel(new QStandardItemModel),
+    m_shown(true),
+    m_suppressed(false),
+    m_width(0),
+    m_toggleSideBarAction(toggleSideBarAction)
+{
+}
+
+InformationWidget *InformationWidgetPrivate::m_instance = 0;
+
+InformationWidget::InformationWidget(QAction *toggleSideBarAction) :
+    d(new InformationWidgetPrivate(toggleSideBarAction))
+{
+    d->m_factoryModel->setSortRole(FactoryPriorityRole);
+    setOrientation(Qt::Vertical);
+    d->m_instance = this;
+}
+
+
+InformationWidget::~InformationWidget()
+{
+    InformationWidgetPrivate::m_instance = 0;
+    delete d;
+}
+
+InformationWidget *InformationWidget::instance()
+{
+    return InformationWidgetPrivate::m_instance;
+}
+
+void InformationWidget::setFactories(const QList<INavigationWidgetFactory *> factories)
+{
+    Context navicontext(Core::Constants::C_NAVIGATION_PANE);
+
+    foreach (INavigationWidgetFactory *factory, factories) {
+        const Id id = factory->id();
+
+        QShortcut *shortcut = new QShortcut(this);
+        shortcut->setWhatsThis(tr("Activate %1 Pane").arg(factory->displayName()));
+        connect(shortcut, SIGNAL(activated()), this, SLOT(activateSubWidget()));
+//        d->m_shortcutMap.insert(shortcut, id);
+
+//        Command *cmd = ActionManager::registerShortcut(shortcut,
+//            Id(QLatin1String("QtCreator.Sidebar.") + QLatin1String(id.name())), navicontext);
+//        cmd->setDefaultKeySequence(factory->activationSequence());
+//        d->m_commandMap.insert(id, cmd);
+
+        QStandardItem *newRow = new QStandardItem(factory->displayName());
+        newRow->setData(qVariantFromValue(factory), FactoryObjectRole);
+        newRow->setData(QVariant::fromValue(factory->id()), FactoryIdRole);
+        newRow->setData(factory->priority(), FactoryPriorityRole);
+        d->m_factoryModel->appendRow(newRow);
+    }
+    d->m_factoryModel->sort(0);
+    updateToggleText();
+}
+
+int InformationWidget::storedWidth()
+{
+    return d->m_width;
+}
+
+QAbstractItemModel *InformationWidget::factoryModel() const
+{
+    return d->m_factoryModel;
+}
+
+void InformationWidget::updateToggleText()
+{
+    bool haveData = d->m_factoryModel->rowCount();
+    d->m_toggleSideBarAction->setVisible(haveData);
+    d->m_toggleSideBarAction->setEnabled(haveData && InformationWidgetPlaceHolder::m_current);
+
+    if (isShown())
+        d->m_toggleSideBarAction->setToolTip(tr("Hide Sidebar"));
+    else
+        d->m_toggleSideBarAction->setToolTip(tr("Show Sidebar"));
+}
+
+void InformationWidget::placeHolderChanged(InformationWidgetPlaceHolder *holder)
+{
+    d->m_toggleSideBarAction->setChecked(holder && isShown());
+    updateToggleText();
+}
+
+void InformationWidget::resizeEvent(QResizeEvent *re)
+{
+    if (d->m_width && re->size().width())
+        d->m_width = re->size().width();
+    MiniSplitter::resizeEvent(re);
+}
+
+Internal::InformationSubWidget* InformationWidget::insertSubItem(int position,int index)
+{
+    for (int pos = position + 1; pos < d->m_subWidgets.size(); ++pos) {
+        d->m_subWidgets.at(pos)->setPosition(pos + 1);
+    }
+
+    Internal::InformationSubWidget *nsw = new Internal::InformationSubWidget(this, position, index);
+    connect(nsw, SIGNAL(splitMe()), this, SLOT(splitSubWidget()));
+    connect(nsw, SIGNAL(closeMe()), this, SLOT(closeSubWidget()));
+    insertWidget(position, nsw);
+    d->m_subWidgets.insert(position, nsw);
+
+    return nsw;
+}
+
+void InformationWidget::activateSubWidget()
+{
+    QShortcut *original = qobject_cast<QShortcut *>(sender());
+    Id id = d->m_shortcutMap[original];
+    activateSubWidget(id);
+}
+
+void InformationWidget::activateSubWidget(const Id &factoryId)
+{
+    setShown(true);
+    foreach (Internal::InformationSubWidget *subWidget, d->m_subWidgets) {
+        if (subWidget->factory()->id() == factoryId) {
+            subWidget->setFocusWidget();
+            return;
+        }
+    }
+
+    int index = factoryIndex(factoryId);
+    if (index >= 0) {
+        d->m_subWidgets.first()->setFactoryIndex(index);
+        d->m_subWidgets.first()->setFocusWidget();
+    }
+}
+
+void InformationWidget::splitSubWidget()
+{
+    Internal::InformationSubWidget *original = qobject_cast<Internal::InformationSubWidget *>(sender());
+    int pos = indexOf(original) + 1;
+    insertSubItem(pos, original->factoryIndex());
+}
+
+void InformationWidget::closeSubWidget()
+{
+    if (d->m_subWidgets.count() != 1) {
+        Internal::InformationSubWidget *subWidget = qobject_cast<Internal::InformationSubWidget *>(sender());
+        subWidget->saveSettings();
+        d->m_subWidgets.removeOne(subWidget);
+        subWidget->hide();
+        subWidget->deleteLater();
+    } else {
+        setShown(false);
+    }
+}
+
+void InformationWidget::saveSettings(QSettings *settings)
+{
+    QStringList viewIds;
+    for (int i=0; i<d->m_subWidgets.count(); ++i) {
+        d->m_subWidgets.at(i)->saveSettings();
+        viewIds.append(d->m_subWidgets.at(i)->factory()->id().toString());
+    }
+    settings->setValue(QLatin1String("Information/Views"), viewIds);
+    settings->setValue(QLatin1String("Information/Visible"), isShown());
+    settings->setValue(QLatin1String("Information/VerticalPosition"), saveState());
+    settings->setValue(QLatin1String("Information/Width"), d->m_width);
+}
+
+void InformationWidget::restoreSettings(QSettings *settings)
+{
+    if (!d->m_factoryModel->rowCount()) {
+        // We have no widgets to show!
+        setShown(false);
+        return;
+    }
+
+    int version = settings->value(QLatin1String("Information/Version"), 1).toInt();
+    QStringList viewIds = settings->value(QLatin1String("Information/Views"),
+                                          QStringList(QLatin1String("Projects"))).toStringList();
+
+    bool restoreSplitterState = true;
+    if (version == 1) {
+        if (!viewIds.contains(QLatin1String("Open Documents"))) {
+            viewIds += QLatin1String("Open Documents");
+            restoreSplitterState = false;
+        }
+        settings->setValue(QLatin1String("Information/Version"), 2);
+    }
+
+    int position = 0;
+    foreach (const QString &id, viewIds) {
+        int index = factoryIndex(Id(id));
+        if (index >= 0) {
+            // Only add if the id was actually found!
+            insertSubItem(position, index);
+            ++position;
+        } else {
+            restoreSplitterState = false;
+        }
+    }
+
+    if (d->m_subWidgets.isEmpty())
+        // Make sure we have at least the projects widget
+        insertSubItem(0, qMax(0, factoryIndex(Id("Projects"))));
+
+    setShown(settings->value(QLatin1String("Information/Visible"), true).toBool());
+
+    if (restoreSplitterState && settings->contains(QLatin1String("Information/VerticalPosition"))) {
+        restoreState(settings->value(QLatin1String("Information/VerticalPosition")).toByteArray());
+    } else {
+        QList<int> sizes;
+        sizes += 256;
+        for (int i = viewIds.size()-1; i > 0; --i)
+            sizes.prepend(512);
+        setSizes(sizes);
+    }
+
+    d->m_width = settings->value(QLatin1String("Information/Width"), 240).toInt();
+    if (d->m_width < 40)
+        d->m_width = 40;
+
+    // Apply
+    if (InformationWidgetPlaceHolder::m_current)
+        InformationWidgetPlaceHolder::m_current->applyStoredSize(d->m_width);
+}
+
+void InformationWidget::closeSubWidgets()
+{
+    foreach (Internal::InformationSubWidget *subWidget, d->m_subWidgets) {
+        subWidget->saveSettings();
+        delete subWidget;
+    }
+    d->m_subWidgets.clear();
+}
+
+void InformationWidget::setShown(bool b)
+{
+    if (d->m_shown == b)
+        return;
+    bool haveData = d->m_factoryModel->rowCount();
+    d->m_shown = b;
+    if (InformationWidgetPlaceHolder::m_current) {
+        InformationWidgetPlaceHolder::m_current->setVisible(d->m_shown && !d->m_suppressed && haveData);
+        d->m_toggleSideBarAction->setChecked(d->m_shown && !d->m_suppressed && haveData);
+    } else {
+        d->m_toggleSideBarAction->setChecked(false);
+    }
+    updateToggleText();
+}
+
+bool InformationWidget::isShown() const
+{
+    return d->m_shown;
+}
+
+bool InformationWidget::isSuppressed() const
+{
+    return d->m_suppressed;
+}
+
+void InformationWidget::setSuppressed(bool b)
+{
+    if (d->m_suppressed == b)
+        return;
+    d->m_suppressed = b;
+    if (InformationWidgetPlaceHolder::m_current)
+        InformationWidgetPlaceHolder::m_current->setVisible(d->m_shown && !d->m_suppressed);
+}
+
+int InformationWidget::factoryIndex(const Id &id)
+{
+    for (int row = 0; row < d->m_factoryModel->rowCount(); ++row) {
+        if (d->m_factoryModel->data(d->m_factoryModel->index(row, 0), FactoryIdRole).value<Core::Id>() == id) {
+            return row;
+        }
+    }
+    return -1;
+}
+
+QHash<Id, Command *> InformationWidget::commandMap() const
+{
+    return d->m_commandMap;
+}
+
+
+}
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/informationwidget.h ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/informationwidget.h
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/informationwidget.h	1970-01-01 03:00:00.000000000 +0300
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/informationwidget.h	2013-02-06 16:48:38.365116710 +0400
@@ -0,0 +1,103 @@
+#ifndef INFORMATIONWIDGET_H
+#define INFORMATIONWIDGET_H
+
+#include <coreplugin/minisplitter.h>
+#include <coreplugin/id.h>
+
+#include <QHash>
+
+QT_BEGIN_NAMESPACE
+class QSettings;
+class QShortcut;
+class QAbstractItemModel;
+class QStandardItemModel;
+QT_END_NAMESPACE
+
+namespace Core {
+class INavigationWidgetFactory;
+class IMode;
+class Command;
+class InformationWidget;
+struct InformationWidgetPrivate;
+namespace Internal {
+class InformationSubWidget;
+}
+
+class CORE_EXPORT InformationWidgetPlaceHolder : public QWidget {
+    Q_OBJECT
+    friend class Core::InformationWidget;
+
+public:
+    explicit InformationWidgetPlaceHolder(Core::IMode *mode, QWidget *parent = 0);
+    virtual ~InformationWidgetPlaceHolder();
+    static InformationWidgetPlaceHolder* current();
+    void applyStoredSize(int width);
+
+private slots:
+    void currentModeAboutToChange(Core::IMode *);
+
+private:
+    Core::IMode *m_mode;
+    static InformationWidgetPlaceHolder* m_current;
+};
+
+
+
+class CORE_EXPORT InformationWidget : public MiniSplitter
+{
+    Q_OBJECT
+
+public:
+    enum FactoryModelRoles {
+        FactoryObjectRole = Qt::UserRole,
+        FactoryIdRole,
+        FactoryPriorityRole
+    };
+
+    explicit InformationWidget(QAction *toggleSideBarAction);
+    virtual ~InformationWidget();
+
+    void setFactories(const QList<INavigationWidgetFactory*> factories);
+
+    void saveSettings(QSettings *settings);
+    void restoreSettings(QSettings *settings);
+
+    void activateSubWidget(const Id &factoryId);
+    void closeSubWidgets();
+
+    bool isShown() const;
+    void setShown(bool b);
+
+    bool isSuppressed() const;
+    void setSuppressed(bool b);
+
+    static InformationWidget* instance();
+
+    int storedWidth();
+
+    // Called from the place holders
+    void placeHolderChanged(InformationWidgetPlaceHolder *holder);
+
+    QHash<Id, Core::Command *> commandMap() const;
+    QAbstractItemModel *factoryModel() const;
+
+protected:
+    void resizeEvent(QResizeEvent *);
+
+private slots:
+    void activateSubWidget();
+    void splitSubWidget();
+    void closeSubWidget();
+
+private:
+    void updateToggleText();
+    Internal::InformationSubWidget *insertSubItem(int position, int index);
+    int factoryIndex(const Id &id);
+
+    InformationWidgetPrivate *d;
+};
+
+
+}
+
+#endif // INFORMATIONWIDGET_H
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/mainwindow.cpp ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/mainwindow.cpp
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/mainwindow.cpp	2013-01-30 21:20:07.000000000 +0400
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/mainwindow.cpp	2013-02-06 16:48:38.365116710 +0400
@@ -64,6 +64,7 @@
 #include "id.h"
 #include "manhattanstyle.h"
 #include "navigationwidget.h"
+#include "informationwidget.h"
 #include "rightpane.h"
 #include "editormanager/ieditorfactory.h"
 #include "statusbarwidget.h"
@@ -150,6 +151,7 @@
     m_mimeDatabase(new MimeDatabase),
     m_helpManager(new HelpManager),
     m_navigationWidget(0),
+    m_informationWidget(0),
     m_rightPaneWidget(0),
     m_versionDialog(0),
     m_activeContext(0),
@@ -212,6 +214,7 @@
     registerDefaultActions();
 
     m_navigationWidget = new NavigationWidget(m_toggleSideBarAction);
+    m_informationWidget = new InformationWidget(m_toggleSideBarAction);
     m_rightPaneWidget = new RightPaneWidget();
 
     m_modeStack = new FancyTabWidget(this);
@@ -369,6 +372,7 @@
     OutputPaneManager::instance()->init();
     m_vcsManager->extensionsInitialized();
     m_navigationWidget->setFactories(ExtensionSystem::PluginManager::getObjects<INavigationWidgetFactory>());
+    m_informationWidget->setFactories(ExtensionSystem::PluginManager::getObjects<INavigationWidgetFactory>());
 
     // reading the shortcut settings must be done after all shortcuts have been registered
     m_actionManager->d->initialize();
@@ -407,6 +411,7 @@
     writeSettings();
 
     m_navigationWidget->closeSubWidgets();
+    m_informationWidget->closeSubWidgets();
 
     event->accept();
 }
@@ -1195,6 +1200,7 @@
 
     m_editorManager->readSettings();
     m_navigationWidget->restoreSettings(m_settings);
+    m_informationWidget->restoreSettings(m_settings);
     m_rightPaneWidget->readSettings(m_settings);
 }
 
@@ -1214,6 +1220,7 @@
     m_actionManager->d->saveSettings(m_settings);
     m_editorManager->saveSettings();
     m_navigationWidget->saveSettings(m_settings);
+    m_informationWidget->saveSettings(m_settings);
 }
 
 void MainWindow::updateAdditionalContexts(const Context &remove, const Context &add)
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/mainwindow.h ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/mainwindow.h
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/mainwindow.h	2013-01-30 21:20:07.000000000 +0400
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/mainwindow.h	2013-02-06 16:48:38.365116710 +0400
@@ -59,6 +59,7 @@
 class ModeManager;
 class ProgressManager;
 class NavigationWidget;
+class InformationWidget;
 class RightPaneWidget;
 class ScriptManager;
 class SettingsDatabase;
@@ -197,6 +198,7 @@
     HelpManager *m_helpManager;
     FancyTabWidget *m_modeStack;
     NavigationWidget *m_navigationWidget;
+    InformationWidget *m_informationWidget;
     RightPaneWidget *m_rightPaneWidget;
     Core::StatusBarWidget *m_outputView;
     VersionDialog *m_versionDialog;
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/navigationsubwidget.cpp ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/navigationsubwidget.cpp
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/navigationsubwidget.cpp	2013-01-30 21:20:07.000000000 +0400
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/navigationsubwidget.cpp	2013-02-06 16:48:38.365116710 +0400
@@ -53,7 +53,7 @@
 #include <QShortcut>
 #include <QStandardItemModel>
 
-Q_DECLARE_METATYPE(Core::INavigationWidgetFactory *)
+//Q_DECLARE_METATYPE(Core::INavigationWidgetFactory *)
 
 namespace Core {
 namespace Internal {
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/navigationwidget.cpp ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/navigationwidget.cpp
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/navigationwidget.cpp	2013-01-30 21:20:07.000000000 +0400
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/navigationwidget.cpp	2013-02-06 16:48:38.365116710 +0400
@@ -52,7 +52,7 @@
 #include <QShortcut>
 #include <QStandardItemModel>
 
-Q_DECLARE_METATYPE(Core::INavigationWidgetFactory *)
+//Q_DECLARE_METATYPE(Core::INavigationWidgetFactory *)
 
 namespace Core {
 
diff -Naurb ./qt-creator-2.6.2-src/src/plugins/coreplugin/rightpane.cpp ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/rightpane.cpp
--- ./qt-creator-2.6.2-src/src/plugins/coreplugin/rightpane.cpp	2013-01-30 21:20:07.000000000 +0400
+++ ./qt-creator-2.6.2-src-patched/src/plugins/coreplugin/rightpane.cpp	2013-02-06 16:49:05.296166560 +0400
@@ -68,26 +68,26 @@
 
 void RightPanePlaceHolder::applyStoredSize(int width)
 {
-    if (width) {
-        QSplitter *splitter = qobject_cast<QSplitter *>(parentWidget());
-        if (splitter) {
-            // A splitter we need to resize the splitter sizes
-            QList<int> sizes = splitter->sizes();
-            int index = splitter->indexOf(this);
-            int diff = width - sizes.at(index);
-            int adjust = sizes.count() > 1 ? (diff / (sizes.count() - 1)) : 0;
-            for (int i = 0; i < sizes.count(); ++i) {
-                if (i != index)
-                    sizes[i] -= adjust;
-            }
-            sizes[index]= width;
-            splitter->setSizes(sizes);
-        } else {
-            QSize s = size();
-            s.setWidth(width);
-            resize(s);
-        }
-    }
+//     if (width) {
+//         QSplitter *splitter = qobject_cast<QSplitter *>(parentWidget());
+//         if (splitter) {
+//             // A splitter we need to resize the splitter sizes
+//             QList<int> sizes = splitter->sizes();
+//             int index = splitter->indexOf(this);
+//             int diff = width - sizes.at(index);
+//             int adjust = sizes.count() > 1 ? (diff / (sizes.count() - 1)) : 0;
+//             for (int i = 0; i < sizes.count(); ++i) {
+//                 if (i != index)
+//                     sizes[i] -= adjust;
+//             }
+//             sizes[index]= width;
+//             splitter->setSizes(sizes);
+//         } else {
+//             QSize s = size();
+//             s.setWidth(width);
+//             resize(s);
+//         }
+//     }
 }
 
 // This function does work even though the order in which
